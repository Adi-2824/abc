// DTOs/UserManagementDTOs.cs
using System.ComponentModel.DataAnnotations;
using AirTicketReservation.Models;

namespace AirTicketReservation.DTOs
{
    public class CreateUserDTO
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }
        
        [Required]
        [MinLength(6)]
        public string Password { get; set; }
        
        [Required]
        public string FirstName { get; set; }
        
        [Required]
        public string LastName { get; set; }
        
        public string PhoneNumber { get; set; }
        
        [Required]
        public UserRole Role { get; set; } = UserRole.User;
    }
    
    public class UpdateUserDTO
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }
        
        [Required]
        public string FirstName { get; set; }
        
        [Required]
        public string LastName { get; set; }
        
        public string PhoneNumber { get; set; }
        
        [Required]
        public UserRole Role { get; set; }
    }
    
    public class ChangePasswordDTO
    {
        [Required]
        [MinLength(6)]
        public string NewPassword { get; set; }
    }
    
    public class UserDetailsDTO
    {
        public int Id { get; set; }
        public string Email { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string PhoneNumber { get; set; }
        public UserRole Role { get; set; }
        public DateTime CreatedAt { get; set; }
        public int TotalReservations { get; set; }
        public decimal TotalSpent { get; set; }
        public DateTime? LastLoginDate { get; set; }
    }
    
    public class UserListDTO
    {
        public int Id { get; set; }
        public string Email { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public UserRole Role { get; set; }
        public DateTime CreatedAt { get; set; }
        public int ReservationCount { get; set; }
        public DateTime? LastLoginDate { get; set; }
    }
    
    public class UserSearchDTO
    {
        public string SearchTerm { get; set; }
        public UserRole? Role { get; set; }
        public DateTime? CreatedAfter { get; set; }
        public DateTime? CreatedBefore { get; set; }
        public int Page { get; set; } = 1;
        public int PageSize { get; set; } = 10;
        public string SortBy { get; set; } = "CreatedAt";
        public bool SortDescending { get; set; } = true;
    }
    
    public class PagedResult<T>
    {
        public List<T> Items { get; set; } = new List<T>();
        public int TotalCount { get; set; }
        public int CurrentPage { get; set; }
        public int PageSize { get; set; }
        public int TotalPages { get; set; }
        public bool HasNextPage { get; set; }
        public bool HasPreviousPage { get; set; }
    }
}

// Services/IUserManagementService.cs
using AirTicketReservation.DTOs;

namespace AirTicketReservation.Services
{
    public interface IUserManagementService
    {
        Task<PagedResult<UserListDTO>> GetUsersAsync(UserSearchDTO searchDto);
        Task<UserDetailsDTO> GetUserByIdAsync(int userId);
        Task<UserDetailsDTO> CreateUserAsync(CreateUserDTO createUserDto);
        Task<UserDetailsDTO> UpdateUserAsync(int userId, UpdateUserDTO updateUserDto);
        Task<bool> DeleteUserAsync(int userId);
        Task<bool> ChangeUserPasswordAsync(int userId, ChangePasswordDTO changePasswordDto);
        Task<List<UserListDTO>> GetRecentUsersAsync(int count = 10);
        Task<Dictionary<string, object>> GetUserStatisticsAsync();
    }
}


-----------------------------------

// Services/UserManagementService.cs
using Microsoft.EntityFrameworkCore;
using AirTicketReservation.Data;
using AirTicketReservation.DTOs;
using AirTicketReservation.Models;
using BCrypt.Net;

namespace AirTicketReservation.Services
{
    public class UserManagementService : IUserManagementService
    {
        private readonly ApplicationDbContext _context;
        
        public UserManagementService(ApplicationDbContext context)
        {
            _context = context;
        }
        
        public async Task<PagedResult<UserListDTO>> GetUsersAsync(UserSearchDTO searchDto)
        {
            var query = _context.Users.AsQueryable();
            
            // Apply search filters
            if (!string.IsNullOrEmpty(searchDto.SearchTerm))
            {
                var searchTerm = searchDto.SearchTerm.ToLower();
                query = query.Where(u => 
                    u.Email.ToLower().Contains(searchTerm) ||
                    u.FirstName.ToLower().Contains(searchTerm) ||
                    u.LastName.ToLower().Contains(searchTerm));
            }
            
            if (searchDto.Role.HasValue)
            {
                query = query.Where(u => u.Role == searchDto.Role.Value);
            }
            
            if (searchDto.CreatedAfter.HasValue)
            {
                query = query.Where(u => u.CreatedAt >= searchDto.CreatedAfter.Value);
            }
            
            if (searchDto.CreatedBefore.HasValue)
            {
                query = query.Where(u => u.CreatedAt <= searchDto.CreatedBefore.Value);
            }
            
            // Apply sorting
            query = searchDto.SortBy.ToLower() switch
            {
                "email" => searchDto.SortDescending ? query.OrderByDescending(u => u.Email) : query.OrderBy(u => u.Email),
                "firstname" => searchDto.SortDescending ? query.OrderByDescending(u => u.FirstName) : query.OrderBy(u => u.FirstName),
                "lastname" => searchDto.SortDescending ? query.OrderByDescending(u => u.LastName) : query.OrderBy(u => u.LastName),
                "role" => searchDto.SortDescending ? query.OrderByDescending(u => u.Role) : query.OrderBy(u => u.Role),
                _ => searchDto.SortDescending ? query.OrderByDescending(u => u.CreatedAt) : query.OrderBy(u => u.CreatedAt)
            };
            
            var totalCount = await query.CountAsync();
            
            var users = await query
                .Skip((searchDto.Page - 1) * searchDto.PageSize)
                .Take(searchDto.PageSize)
                .Include(u => u.Reservations)
                .ToListAsync();
            
            var userDtos = new List<UserListDTO>();
            
            foreach (var user in users)
            {
                var lastLogin = await _context.LoginLogs
                    .Where(l => l.Email == user.Email && l.IsSuccessful)
                    .OrderByDescending(l => l.LoginTime)
                    .Select(l => l.LoginTime)
                    .FirstOrDefaultAsync();
                
                userDtos.Add(new UserListDTO
                {
                    Id = user.Id,
                    Email = user.Email,
                    FirstName = user.FirstName,
                    LastName = user.LastName,
                    Role = user.Role,
                    CreatedAt = user.CreatedAt,
                    ReservationCount = user.Reservations.Count,
                    LastLoginDate = lastLogin == DateTime.MinValue ? null : lastLogin
                });
            }
            
            var totalPages = (int)Math.Ceiling((double)totalCount / searchDto.PageSize);
            
            return new PagedResult<UserListDTO>
            {
                Items = userDtos,
                TotalCount = totalCount,
                CurrentPage = searchDto.Page,
                PageSize = searchDto.PageSize,
                TotalPages = totalPages,
                HasNextPage = searchDto.Page < totalPages,
                HasPreviousPage = searchDto.Page > 1
            };
        }
        
        public async Task<UserDetailsDTO> GetUserByIdAsync(int userId)
        {
            var user = await _context.Users
                .Include(u => u.Reservations)
                    .ThenInclude(r => r.Payment)
                .FirstOrDefaultAsync(u => u.Id == userId);
            
            if (user == null)
                return null;
            
            var lastLogin = await _context.LoginLogs
                .Where(l => l.Email == user.Email && l.IsSuccessful)
                .OrderByDescending(l => l.LoginTime)
                .Select(l => l.LoginTime)
                .FirstOrDefaultAsync();
            
            var totalSpent = user.Reservations
                .Where(r => r.Status == ReservationStatus.Confirmed)
                .Sum(r => r.TotalAmount);
            
            return new UserDetailsDTO
            {
                Id = user.Id,
                Email = user.Email,
                FirstName = user.FirstName,
                LastName = user.LastName,
                PhoneNumber = user.PhoneNumber,
                Role = user.Role,
                CreatedAt = user.CreatedAt,
                TotalReservations = user.Reservations.Count,
                TotalSpent = totalSpent,
                LastLoginDate = lastLogin == DateTime.MinValue ? null : lastLogin
            };
        }
        
        public async Task<UserDetailsDTO> CreateUserAsync(CreateUserDTO createUserDto)
        {
            // Check if email already exists
            if (await _context.Users.AnyAsync(u => u.Email == createUserDto.Email))
            {
                throw new InvalidOperationException("Email already exists");
            }
            
            var user = new User
            {
                Email = createUserDto.Email,
                Password = BCrypt.Net.BCrypt.HashPassword(createUserDto.Password),
                FirstName = createUserDto.FirstName,
                LastName = createUserDto.LastName,
                PhoneNumber = createUserDto.PhoneNumber,
                Role = createUserDto.Role,
                CreatedAt = DateTime.UtcNow
            };
            
            _context.Users.Add(user);
            await _context.SaveChangesAsync();
            
            return new UserDetailsDTO
            {
                Id = user.Id,
                Email = user.Email,
                FirstName = user.FirstName,
                LastName = user.LastName,
                PhoneNumber = user.PhoneNumber,
                Role = user.Role,
                CreatedAt = user.CreatedAt,
                TotalReservations = 0,
                TotalSpent = 0,
                LastLoginDate = null
            };
        }
        
        public async Task<UserDetailsDTO> UpdateUserAsync(int userId, UpdateUserDTO updateUserDto)
        {
            var user = await _context.Users.FindAsync(userId);
            if (user == null)
                return null;
            
            // Check if email is being changed and if new email already exists
            if (user.Email != updateUserDto.Email && 
                await _context.Users.AnyAsync(u => u.Email == updateUserDto.Email && u.Id != userId))
            {
                throw new InvalidOperationException("Email already exists");
            }
            
            user.Email = updateUserDto.Email;
            user.FirstName = updateUserDto.FirstName;
            user.LastName = updateUserDto.LastName;
            user.PhoneNumber = updateUserDto.PhoneNumber;
            user.Role = updateUserDto.Role;
            
            await _context.SaveChangesAsync();
            
            return await GetUserByIdAsync(userId);
        }
        
        public async Task<bool> DeleteUserAsync(int userId)
        {
            var user = await _context.Users
                .Include(u => u.Reservations)
                .FirstOrDefaultAsync(u => u.Id == userId);
            
            if (user == null)
                return false;
            
            // Check if user has active reservations
            var hasActiveReservations = user.Reservations.Any(r => 
                r.Status == ReservationStatus.Confirmed || 
                r.Status == ReservationStatus.Pending);
            
            if (hasActiveReservations)
            {
                throw new InvalidOperationException("Cannot delete user with active reservations");
            }
            
            // Don't allow deletion of the last admin
            if (user.Role == UserRole.Admin)
            {
                var adminCount = await _context.Users.CountAsync(u => u.Role == UserRole.Admin);
                if (adminCount <= 1)
                {
                    throw new InvalidOperationException("Cannot delete the last admin user");
                }
            }
            
            _context.Users.Remove(user);
            await _context.SaveChangesAsync();
            
            return true;
        }
        
        public async Task<bool> ChangeUserPasswordAsync(int userId, ChangePasswordDTO changePasswordDto)
        {
            var user = await _context.Users.FindAsync(userId);
            if (user == null)
                return false;
            
            user.Password = BCrypt.Net.BCrypt.HashPassword(changePasswordDto.NewPassword);
            await _context.SaveChangesAsync();
            
            return true;
        }
        
        public async Task<List<UserListDTO>> GetRecentUsersAsync(int count = 10)
        {
            var users = await _context.Users
                .OrderByDescending(u => u.CreatedAt)
                .Take(count)
                .Include(u => u.Reservations)
                .ToListAsync();
            
            var userDtos = new List<UserListDTO>();
            
            foreach (var user in users)
            {
                var lastLogin = await _context.LoginLogs
                    .Where(l => l.Email == user.Email && l.IsSuccessful)
                    .OrderByDescending(l => l.LoginTime)
                    .Select(l => l.LoginTime)
                    .FirstOrDefaultAsync();
                
                userDtos.Add(new UserListDTO
                {
                    Id = user.Id,
                    Email = user.Email,
                    FirstName = user.FirstName,
                    LastName = user.LastName,
                    Role = user.Role,
                    CreatedAt = user.CreatedAt,
                    ReservationCount = user.Reservations.Count,
                    LastLoginDate = lastLogin == DateTime.MinValue ? null : lastLogin
                });
            }
            
            return userDtos;
        }
        
        public async Task<Dictionary<string, object>> GetUserStatisticsAsync()
        {
            var totalUsers = await _context.Users.CountAsync();
            var totalAdmins = await _context.Users.CountAsync(u => u.Role == UserRole.Admin);
            var totalRegularUsers = await _context.Users.CountAsync(u => u.Role == UserRole.User);
            
            var usersThisMonth = await _context.Users
                .CountAsync(u => u.CreatedAt >= DateTime.UtcNow.AddMonths(-1));
            
            var usersThisWeek = await _context.Users
                .CountAsync(u => u.CreatedAt >= DateTime.UtcNow.AddDays(-7));
            
            var activeUsers = await _context.LoginLogs
                .Where(l => l.IsSuccessful && l.LoginTime >= DateTime.UtcNow.AddDays(-30))
                .Select(l => l.Email)
                .Distinct()
                .CountAsync();
            
            var topSpenders = await _context.Users
                .Include(u => u.Reservations)
                .ThenInclude(r => r.Payment)
                .Where(u => u.Reservations.Any(r => r.Status == ReservationStatus.Confirmed))
                .Select(u => new
                {
                    u.FirstName,
                    u.LastName,
                    u.Email,
                    TotalSpent = u.Reservations
                        .Where(r => r.Status == ReservationStatus.Confirmed)
                        .Sum(r => r.TotalAmount)
                })
                .OrderByDescending(u => u.TotalSpent)
                .Take(5)
                .ToListAsync();
            
            return new Dictionary<string, object>
            {
                { "totalUsers", totalUsers },
                { "totalAdmins", totalAdmins },
                { "totalRegularUsers", totalRegularUsers },
                { "newUsersThisMonth", usersThisMonth },
                { "newUsersThisWeek", usersThisWeek },
                { "activeUsersLast30Days", activeUsers },
                { "topSpenders", topSpenders }
            };
        }
    }
}
---------------------------------------

// Controllers/UserManagementController.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using AirTicketReservation.DTOs;
using AirTicketReservation.Services;

namespace AirTicketReservation.Controllers
{
    [ApiController]
    [Route("api/admin/[controller]")]
    [Authorize(Roles = "Admin")] // Only Admin can access these endpoints
    public class UserManagementController : ControllerBase
    {
        private readonly IUserManagementService _userManagementService;
        
        public UserManagementController(IUserManagementService userManagementService)
        {
            _userManagementService = userManagementService;
        }
        
        /// <summary>
        /// Get paginated list of users with search and filtering
        /// </summary>
        [HttpGet]
        public async Task<ActionResult<PagedResult<UserListDTO>>> GetUsers([FromQuery] UserSearchDTO searchDto)
        {
            var result = await _userManagementService.GetUsersAsync(searchDto);
            return Ok(result);
        }
        
        /// <summary>
        /// Get detailed information about a specific user
        /// </summary>
        [HttpGet("{id}")]
        public async Task<ActionResult<UserDetailsDTO>> GetUser(int id)
        {
            var user = await _userManagementService.GetUserByIdAsync(id);
            if (user == null)
                return NotFound(new { message = "User not found" });
            
            return Ok(user);
        }
        
        /// <summary>
        /// Create a new user
        /// </summary>
        [HttpPost]
        public async Task<ActionResult<UserDetailsDTO>> CreateUser([FromBody] CreateUserDTO createUserDto)
        {
            try
            {
                var user = await _userManagementService.CreateUserAsync(createUserDto);
                return CreatedAtAction(nameof(GetUser), new { id = user.Id }, user);
            }
            catch (InvalidOperationException ex)
            {
                return BadRequest(new { message = ex.Message });
            }
        }
        
        /// <summary>
        /// Update an existing user
        /// </summary>
        [HttpPut("{id}")]
        public async Task<ActionResult<UserDetailsDTO>> UpdateUser(int id, [FromBody] UpdateUserDTO updateUserDto)
        {
            try
            {
                var user = await _userManagementService.UpdateUserAsync(id, updateUserDto);
                if (user == null)
                    return NotFound(new { message = "User not found" });
                
                return Ok(user);
            }
            catch (InvalidOperationException ex)
            {
                return BadRequest(new { message = ex.Message });
            }
        }
        
        /// <summary>
        /// Delete a user
        /// </summary>
        [HttpDelete("{id}")]
        public async Task<ActionResult> DeleteUser(int id)
        {
            try
            {
                var result = await _userManagementService.DeleteUserAsync(id);
                if (!result)
                    return NotFound(new { message = "User not found" });
                
                return Ok(new { message = "User deleted successfully" });
            }
            catch (InvalidOperationException ex)
            {
                return BadRequest(new { message = ex.Message });
            }
        }
        
        /// <summary>
        /// Change a user's password
        /// </summary>
        [HttpPost("{id}/change-password")]
        public async Task<ActionResult> ChangeUserPassword(int id, [FromBody] ChangePasswordDTO changePasswordDto)
        {
            var result = await _userManagementService.ChangeUserPasswordAsync(id, changePasswordDto);
            if (!result)
                return NotFound(new { message = "User not found" });
            
            return Ok(new { message = "Password changed successfully" });
        }
        
        /// <summary>
        /// Get recently registered users
        /// </summary>
        [HttpGet("recent")]
        public async Task<ActionResult<List<UserListDTO>>> GetRecentUsers([FromQuery] int count = 10)
        {
            if (count <= 0 || count > 100)
                count = 10;
            
            var users = await _userManagementService.GetRecentUsersAsync(count);
            return Ok(users);
        }
        
        /// <summary>
        /// Get user statistics for dashboard
        /// </summary>
        [HttpGet("statistics")]
        public async Task<ActionResult<Dictionary<string, object>>> GetUserStatistics()
        {
            var statistics = await _userManagementService.GetUserStatisticsAsync();
            return Ok(statistics);
        }
    }
}
----------------------------------------

------------------------------------------------------------------------- user side edit profile 

// DTOs/UserManagementDTOs.cs - Add this new DTO to your existing file
public class UpdateUserProfileDTO
{
    [Required]
    [EmailAddress]
    public string Email { get; set; }
    
    [Required]
    public string FirstName { get; set; }
    
    [Required]
    public string LastName { get; set; }
    
    public string PhoneNumber { get; set; }
}

// Services/IUserManagementService.cs - Add this method to your existing interface
Task<UserDetailsDTO> UpdateUserProfileAsync(int userId, UpdateUserProfileDTO updateUserProfileDto);

// Services/UserManagementService.cs - Add this method to your existing service class
public async Task<UserDetailsDTO> UpdateUserProfileAsync(int userId, UpdateUserProfileDTO updateUserProfileDto)
{
    var user = await _context.Users.FindAsync(userId);
    if (user == null)
        return null;
    
    // Check if email is being changed and if new email already exists
    if (user.Email != updateUserProfileDto.Email && 
        await _context.Users.AnyAsync(u => u.Email == updateUserProfileDto.Email && u.Id != userId))
    {
        throw new InvalidOperationException("Email already exists");
    }
    
    // Update only the allowed fields (excluding Role)
    user.Email = updateUserProfileDto.Email;
    user.FirstName = updateUserProfileDto.FirstName;
    user.LastName = updateUserProfileDto.LastName;
    user.PhoneNumber = updateUserProfileDto.PhoneNumber;
    
    await _context.SaveChangesAsync();
    
    return await GetUserByIdAsync(userId);
}

// Controllers/UserProfileController.cs - New controller for user-side operations
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using AirTicketReservation.DTOs;
using AirTicketReservation.Services;
using System.Security.Claims;

namespace AirTicketReservation.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Authorize] // All authenticated users can access
    public class UserProfileController : ControllerBase
    {
        private readonly IUserManagementService _userManagementService;
        
        public UserProfileController(IUserManagementService userManagementService)
        {
            _userManagementService = userManagementService;
        }
        
        /// <summary>
        /// Get current user's profile details
        /// </summary>
        [HttpGet]
        public async Task<ActionResult<UserDetailsDTO>> GetMyProfile()
        {
            var userIdClaim = User.FindFirst(ClaimTypes.NameIdentifier);
            if (userIdClaim == null || !int.TryParse(userIdClaim.Value, out int userId))
            {
                return BadRequest(new { message = "Invalid user token" });
            }
            
            var user = await _userManagementService.GetUserByIdAsync(userId);
            if (user == null)
                return NotFound(new { message = "User not found" });
            
            return Ok(user);
        }
        
        /// <summary>
        /// Update current user's profile details (excluding role)
        /// </summary>
        [HttpPut]
        public async Task<ActionResult<UserDetailsDTO>> UpdateMyProfile([FromBody] UpdateUserProfileDTO updateUserProfileDto)
        {
            var userIdClaim = User.FindFirst(ClaimTypes.NameIdentifier);
            if (userIdClaim == null || !int.TryParse(userIdClaim.Value, out int userId))
            {
                return BadRequest(new { message = "Invalid user token" });
            }
            
            try
            {
                var user = await _userManagementService.UpdateUserProfileAsync(userId, updateUserProfileDto);
                if (user == null)
                    return NotFound(new { message = "User not found" });
                
                return Ok(user);
            }
            catch (InvalidOperationException ex)
            {
                return BadRequest(new { message = ex.Message });
            }
        }
        
        /// <summary>
        /// Change current user's password
        /// </summary>
        [HttpPost("change-password")]
        public async Task<ActionResult> ChangeMyPassword([FromBody] ChangePasswordDTO changePasswordDto)
        {
            var userIdClaim = User.FindFirst(ClaimTypes.NameIdentifier);
            if (userIdClaim == null || !int.TryParse(userIdClaim.Value, out int userId))
            {
                return BadRequest(new { message = "Invalid user token" });
            }
            
            var result = await _userManagementService.ChangeUserPasswordAsync(userId, changePasswordDto);
            if (!result)
                return NotFound(new { message = "User not found" });
            
            return Ok(new { message = "Password changed successfully" });
        }
    }
}

// Don't forget to register the service in Program.cs if not already done
// builder.Services.AddScoped<IUserManagementService, UserManagementService>();
