// app.component.ts
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { HttpClient, HttpClientModule, HttpHeaders } from '@angular/common/http';

interface User {
  id: number;
  email: string;
  firstName: string;
  lastName: string;
  phoneNumber: string;
  role: string;
  createdAt: string;
  lastLogin?: string;
}

interface Flight {
  id: number;
  flightNumber: string;
  airline: string;
  origin: string;
  destination: string;
  departureDateTime: string;
  arrivalDateTime: string;
  availableEconomySeats: number;
  availableBusinessSeats: number;
  economyPrice: number;
  businessPrice: number;
  status: string;
}

interface Reservation {
  id: number;
  bookingReference: string;
  userId: number;
  userEmail: string;
  flightNumber: string;
  passengerCount: number;
  totalAmount: number;
  status: string;
  createdAt: string;
  flight: {
    origin: string;
    destination: string;
    departureDateTime: string;
  };
}

interface Payment {
  id: number;
  reservationId: number;
  bookingReference: string;
  amount: number;
  paymentMethod: string;
  status: string;
  paymentDate: string;
  transactionId: string;
}

interface AuthResponse {
  token: string;
  user: User;
}

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [CommonModule, FormsModule, HttpClientModule],
  template: `
    <div class="admin-dashboard">
      <!-- Header -->
      <header class="dashboard-header">
        <div class="container">
          <h1>‚úàÔ∏è Airline Admin Dashboard</h1>
          <div class="admin-info" *ngIf="currentUser">
            <span>Welcome, {{currentUser.firstName}} {{currentUser.lastName}}</span>
            <button class="btn btn-outline" (click)="logout()">Logout</button>
          </div>
        </div>
      </header>

      <!-- Login Form -->
      <div class="login-container" *ngIf="!isAuthenticated">
        <div class="login-form">
          <h2>Admin Login</h2>
          <form (ngSubmit)="login()">
            <div class="form-group">
              <label>Email:</label>
              <input type="email" [(ngModel)]="loginForm.email" name="email" required>
            </div>
            <div class="form-group">
              <label>Password:</label>
              <input type="password" [(ngModel)]="loginForm.password" name="password" required>
            </div>
            <button type="submit" class="btn btn-primary" [disabled]="isLoading">
              {{isLoading ? 'Logging in...' : 'Login'}}
            </button>
          </form>
          <div class="error-message" *ngIf="errorMessage">{{errorMessage}}</div>
        </div>
      </div>

      <!-- Dashboard Content -->
      <div class="dashboard-content" *ngIf="isAuthenticated">
        <!-- Navigation Tabs -->
        <nav class="dashboard-nav">
          <div class="container">
            <button 
              class="nav-tab" 
              [class.active]="activeTab === 'overview'"
              (click)="setActiveTab('overview')">
              üìä Overview
            </button>
            <button 
              class="nav-tab" 
              [class.active]="activeTab === 'flights'"
              (click)="setActiveTab('flights')">
              ‚úàÔ∏è Flights
            </button>
            <button 
              class="nav-tab" 
              [class.active]="activeTab === 'reservations'"
              (click)="setActiveTab('reservations')">
              üìã Reservations
            </button>
            <button 
              class="nav-tab" 
              [class.active]="activeTab === 'payments'"
              (click)="setActiveTab('payments')">
              üí≥ Payments
            </button>
            <button 
              class="nav-tab" 
              [class.active]="activeTab === 'users'"
              (click)="setActiveTab('users')">
              üë• Users
            </button>
          </div>
        </nav>

        <div class="container">
          <!-- Overview Tab -->
          <div class="tab-content" *ngIf="activeTab === 'overview'">
            <h2>System Overview</h2>
            <div class="stats-grid">
              <div class="stat-card">
                <h3>{{flights.length}}</h3>
                <p>Total Flights</p>
              </div>
              <div class="stat-card">
                <h3>{{reservations.length}}</h3>
                <p>Total Reservations</p>
              </div>
              <div class="stat-card">
                <h3>{{payments.filter(p => p.status === 'Completed').length}}</h3>
                <p>Completed Payments</p>
              </div>
              <div class="stat-card">
                <h3>{{users.length}}</h3>
                <p>Registered Users</p>
              </div>
            </div>

            <div class="recent-activity">
              <h3>Recent Activity</h3>
              <div class="activity-list">
                <div class="activity-item" *ngFor="let reservation of reservations.slice(0, 5)">
                  <span class="activity-icon">üìã</span>
                  <div class="activity-details">
                    <strong>New Reservation: {{reservation.bookingReference}}</strong>
                    <p>{{reservation.flight.origin}} ‚Üí {{reservation.flight.destination}} | ${{reservation.totalAmount}}</p>
                    <small>{{formatDate(reservation.createdAt)}}</small>
                  </div>
                  <span class="status-badge" [class]="'status-' + reservation.status.toLowerCase()">
                    {{reservation.status}}
                  </span>
                </div>
              </div>
            </div>
          </div>

          <!-- Flights Tab -->
          <div class="tab-content" *ngIf="activeTab === 'flights'">
            <div class="section-header">
              <h2>Flight Management</h2>
              <button class="btn btn-primary" (click)="showAddFlightForm = !showAddFlightForm">
                + Add New Flight
              </button>
            </div>

            <!-- Add Flight Form -->
            <div class="form-container" *ngIf="showAddFlightForm">
              <h3>Add New Flight</h3>
              <form (ngSubmit)="addFlight()">
                <div class="form-row">
                  <div class="form-group">
                    <label>Flight Number:</label>
                    <input type="text" [(ngModel)]="newFlight.flightNumber" name="flightNumber" required>
                  </div>
                  <div class="form-group">
                    <label>Airline:</label>
                    <input type="text" [(ngModel)]="newFlight.airline" name="airline" required>
                  </div>
                </div>
                <div class="form-row">
                  <div class="form-group">
                    <label>Origin:</label>
                    <input type="text" [(ngModel)]="newFlight.origin" name="origin" required>
                  </div>
                  <div class="form-group">
                    <label>Destination:</label>
                    <input type="text" [(ngModel)]="newFlight.destination" name="destination" required>
                  </div>
                </div>
                <div class="form-row">
                  <div class="form-group">
                    <label>Departure:</label>
                    <input type="datetime-local" [(ngModel)]="newFlight.departureDateTime" name="departure" required>
                  </div>
                  <div class="form-group">
                    <label>Arrival:</label>
                    <input type="datetime-local" [(ngModel)]="newFlight.arrivalDateTime" name="arrival" required>
                  </div>
                </div>
                <div class="form-row">
                  <div class="form-group">
                    <label>Economy Seats:</label>
                    <input type="number" [(ngModel)]="newFlight.availableEconomySeats" name="economySeats" required>
                  </div>
                  <div class="form-group">
                    <label>Business Seats:</label>
                    <input type="number" [(ngModel)]="newFlight.availableBusinessSeats" name="businessSeats" required>
                  </div>
                </div>
                <div class="form-row">
                  <div class="form-group">
                    <label>Economy Price:</label>
                    <input type="number" step="0.01" [(ngModel)]="newFlight.economyPrice" name="economyPrice" required>
                  </div>
                  <div class="form-group">
                    <label>Business Price:</label>
                    <input type="number" step="0.01" [(ngModel)]="newFlight.businessPrice" name="businessPrice" required>
                  </div>
                </div>
                <div class="form-actions">
                  <button type="submit" class="btn btn-primary">Add Flight</button>
                  <button type="button" class="btn btn-secondary" (click)="showAddFlightForm = false">Cancel</button>
                </div>
              </form>
            </div>

            <!-- Flights Table -->
            <div class="table-container">
              <table class="data-table">
                <thead>
                  <tr>
                    <th>Flight Number</th>
                    <th>Airline</th>
                    <th>Route</th>
                    <th>Departure</th>
                    <th>Available Seats</th>
                    <th>Pricing</th>
                    <th>Status</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  <tr *ngFor="let flight of flights">
                    <td><strong>{{flight.flightNumber}}</strong></td>
                    <td>{{flight.airline}}</td>
                    <td>{{flight.origin}} ‚Üí {{flight.destination}}</td>
                    <td>{{formatDate(flight.departureDateTime)}}</td>
                    <td>
                      <div class="seat-info">
                        <span class="seat-class">Economy: {{flight.availableEconomySeats}}</span>
                        <span class="seat-class">Business: {{flight.availableBusinessSeats}}</span>
                      </div>
                    </td>
                    <td>
                      <div class="price-info">
                        <span class="price">Eco: ${{flight.economyPrice}}</span>
                        <span class="price">Bus: ${{flight.businessPrice}}</span>
                      </div>
                    </td>
                    <td>
                      <span class="status-badge status-active">{{flight.status || 'Active'}}</span>
                    </td>
                    <td>
                      <button class="btn btn-sm btn-outline" (click)="editFlight(flight)">Edit</button>
                      <button class="btn btn-sm btn-danger" (click)="deleteFlight(flight.id)">Delete</button>
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>

          <!-- Reservations Tab -->
          <div class="tab-content" *ngIf="activeTab === 'reservations'">
            <div class="section-header">
              <h2>Reservation Management</h2>
              <div class="filters">
                <select [(ngModel)]="reservationFilter" (change)="filterReservations()">
                  <option value="">All Reservations</option>
                  <option value="Pending">Pending</option>
                  <option value="Confirmed">Confirmed</option>
                  <option value="Cancelled">Cancelled</option>
                </select>
              </div>
            </div>

            <div class="table-container">
              <table class="data-table">
                <thead>
                  <tr>
                    <th>Booking Reference</th>
                    <th>Customer</th>
                    <th>Flight Details</th>
                    <th>Passengers</th>
                    <th>Amount</th>
                    <th>Status</th>
                    <th>Created</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  <tr *ngFor="let reservation of filteredReservations">
                    <td><strong>{{reservation.bookingReference}}</strong></td>
                    <td>{{reservation.userEmail}}</td>
                    <td>
                      <div class="flight-details">
                        <strong>{{reservation.flightNumber}}</strong>
                        <p>{{reservation.flight.origin}} ‚Üí {{reservation.flight.destination}}</p>
                        <small>{{formatDate(reservation.flight.departureDateTime)}}</small>
                      </div>
                    </td>
                    <td>{{reservation.passengerCount}}</td>
                    <td><strong>${{reservation.totalAmount}}</strong></td>
                    <td>
                      <span class="status-badge" [class]="'status-' + reservation.status.toLowerCase()">
                        {{reservation.status}}
                      </span>
                    </td>
                    <td>{{formatDate(reservation.createdAt)}}</td>
                    <td>
                      <button class="btn btn-sm btn-outline" (click)="viewReservationDetails(reservation)">View</button>
                      <button class="btn btn-sm btn-danger" 
                              *ngIf="reservation.status !== 'Cancelled'" 
                              (click)="cancelReservation(reservation.id)">Cancel</button>
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>

          <!-- Payments Tab -->
          <div class="tab-content" *ngIf="activeTab === 'payments'">
            <div class="section-header">
              <h2>Payment Management</h2>
              <div class="filters">
                <select [(ngModel)]="paymentFilter" (change)="filterPayments()">
                  <option value="">All Payments</option>
                  <option value="Completed">Completed</option>
                  <option value="Pending">Pending</option>
                  <option value="Failed">Failed</option>
                  <option value="Refunded">Refunded</option>
                </select>
              </div>
            </div>

            <div class="table-container">
              <table class="data-table">
                <thead>
                  <tr>
                    <th>Transaction ID</th>
                    <th>Booking Reference</th>
                    <th>Amount</th>
                    <th>Payment Method</th>
                    <th>Status</th>
                    <th>Date</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  <tr *ngFor="let payment of filteredPayments">
                    <td><strong>{{payment.transactionId}}</strong></td>
                    <td>{{payment.bookingReference}}</td>
                    <td><strong>${{payment.amount}}</strong></td>
                    <td>{{payment.paymentMethod}}</td>
                    <td>
                      <span class="status-badge" [class]="'status-' + payment.status.toLowerCase()">
                        {{payment.status}}
                      </span>
                    </td>
                    <td>{{formatDate(payment.paymentDate)}}</td>
                    <td>
                      <button class="btn btn-sm btn-outline" (click)="viewPaymentDetails(payment)">View</button>
                      <button class="btn btn-sm btn-warning" 
                              *ngIf="payment.status === 'Completed'" 
                              (click)="processRefund(payment.id)">Refund</button>
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>

          <!-- Users Tab -->
          <div class="tab-content" *ngIf="activeTab === 'users'">
            <div class="section-header">
              <h2>User Management</h2>
              <div class="search-box">
                <input type="text" placeholder="Search users..." [(ngModel)]="userSearchTerm" (input)="filterUsers()">
              </div>
            </div>

            <div class="table-container">
              <table class="data-table">
                <thead>
                  <tr>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Phone</th>
                    <th>Role</th>
                    <th>Joined</th>
                    <th>Last Login</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  <tr *ngFor="let user of filteredUsers">
                    <td><strong>{{user.firstName}} {{user.lastName}}</strong></td>
                    <td>{{user.email}}</td>
                    <td>{{user.phoneNumber}}</td>
                    <td>
                      <span class="role-badge" [class]="'role-' + user.role.toLowerCase()">
                        {{user.role}}
                      </span>
                    </td>
                    <td>{{formatDate(user.createdAt)}}</td>
                    <td>{{user.lastLogin ? formatDate(user.lastLogin) : 'Never'}}</td>
                    <td>
                      <button class="btn btn-sm btn-outline" (click)="viewUserDetails(user)">View</button>
                      <button class="btn btn-sm btn-secondary" (click)="toggleUserRole(user)">
                        {{user.role === 'Admin' ? 'Make User' : 'Make Admin'}}
                      </button>
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>

      <!-- Success/Error Messages -->
      <div class="notification" *ngIf="notification" [class]="notification.type">
        {{notification.message}}
      </div>
    </div>
  `,
  styles: [`
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: #f5f7fa;
    }

    .admin-dashboard {
      min-height: 100vh;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    /* Header Styles */
    .dashboard-header {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-bottom: 1px solid rgba(255, 255, 255, 0.2);
      padding: 1rem 0;
      position: sticky;
      top: 0;
      z-index: 100;
    }

    .dashboard-header .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 1rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .dashboard-header h1 {
      color: #2d3748;
      font-size: 1.8rem;
      font-weight: 700;
    }

    .admin-info {
      display: flex;
      align-items: center;
      gap: 1rem;
      color: #4a5568;
    }

    /* Login Styles */
    .login-container {
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 80vh;
      padding: 2rem;
    }

    .login-form {
      background: white;
      padding: 2rem;
      border-radius: 12px;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
      width: 100%;
      max-width: 400px;
    }

    .login-form h2 {
      text-align: center;
      margin-bottom: 1.5rem;
      color: #2d3748;
    }

    .error-message {
      color: #e53e3e;
      text-align: center;
      margin-top: 1rem;
      padding: 0.5rem;
      background: #fed7d7;
      border-radius: 4px;
    }

    /* Navigation Styles */
    .dashboard-nav {
      background: rgba(255, 255, 255, 0.9);
      backdrop-filter: blur(10px);
      border-bottom: 1px solid rgba(255, 255, 255, 0.2);
      padding: 0.5rem 0;
    }

    .dashboard-nav .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 1rem;
      display: flex;
      gap: 0.5rem;
    }

    .nav-tab {
      padding: 0.75rem 1.5rem;
      border: none;
      background: transparent;
      color: #4a5568;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.3s ease;
      font-weight: 500;
    }

    .nav-tab:hover {
      background: rgba(102, 126, 234, 0.1);
      color: #667eea;
    }

    .nav-tab.active {
      background: #667eea;
      color: white;
    }

    /* Content Styles */
    .dashboard-content {
      padding: 2rem 0;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 1rem;
    }

    .tab-content {
      background: white;
      border-radius: 12px;
      padding: 2rem;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
      margin-top: 1rem;
    }

    /* Stats Grid */
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1.5rem;
      margin-bottom: 2rem;
    }

    .stat-card {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 1.5rem;
      border-radius: 12px;
      text-align: center;
      box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
    }

    .stat-card h3 {
      font-size: 2rem;
      font-weight: bold;
      margin-bottom: 0.5rem;
    }

    /* Form Styles */
    .form-group {
      margin-bottom: 1rem;
    }

    .form-group label {
      display: block;
      margin-bottom: 0.5rem;
      color: #4a5568;
      font-weight: 500;
    }

    .form-group input, .form-group select {
      width: 100%;
      padding: 0.75rem;
      border: 2px solid #e2e8f0;
      border-radius: 8px;
      font-size: 1rem;
      transition: border-color 0.3s ease;
    }

    .form-group input:focus, .form-group select:focus {
      outline: none;
      border-color: #667eea;
    }

    .form-row {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 1rem;
    }

    .form-actions {
      display: flex;
      gap: 1rem;
      margin-top: 1.5rem;
    }

    /* Button Styles */
    .btn {
      padding: 0.75rem 1.5rem;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-weight: 500;
      transition: all 0.3s ease;
      text-decoration: none;
      display: inline-block;
      font-size: 0.9rem;
    }

    .btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }

    .btn-primary {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
    }

    .btn-primary:hover:not(:disabled) {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
    }

    .btn-secondary {
      background: #718096;
      color: white;
    }

    .btn-outline {
      background: transparent;
      border: 2px solid #e2e8f0;
      color: #4a5568;
    }

    .btn-outline:hover {
      border-color: #667eea;
      color: #667eea;
    }

    .btn-danger {
      background: #e53e3e;
      color: white;
    }

    .btn-warning {
      background: #ed8936;
      color: white;
    }

    .btn-sm {
      padding: 0.5rem 1rem;
      font-size: 0.8rem;
    }

    /* Table Styles */
    .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
    }

    .section-header h2 {
      color: #2d3748;
      font-size: 1.5rem;
    }

    .table-container {
      overflow-x: auto;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .data-table {
      width: 100%;
      border-collapse: collapse;
      background: white;
    }

    .data-table th {
      background: #f7fafc;
      padding: 1rem;
      text-align: left;
      font-weight: 600;
      color: #2d3748;
      border-bottom: 2px solid #e2e8f0;
    }

    .data-table td {
      padding: 1rem;
      border-bottom: 1px solid #e2e8f0;
      vertical-align: top;
    }

    .data-table tr:hover {
      background: #f7fafc;
    }

    /* Status Badges */
    .status-badge {
      padding: 0.25rem 0.75rem;
      border-radius: 20px;
      font-size: 0.8rem;
      font-weight: 500;
      text-transform: uppercase;
    }

    .status-pending {
      background: #fed7d7;
      color: #c53030;
    }

    .status-confirmed {
      background: #c6f6d5;
      color: #2f855a;
    }

    .status-cancelled {
      background: #fed7d7;
      color: #c53030;
    }

    .status-completed {
      background: #c6f6d5;
      color: #2f855a;
    }

    .status-active {
      background: #bee3f8;
      color: #2b6cb0;
    }

    .status-failed {
      background: #fed7d7;
      color: #c53030;
    }

    .status-refunded {
      background: #fbb6ce;
      color: #b83280;
    }

    .role-badge {
      padding: 0.25rem 0.75rem;
      border-radius: 20px;
      font-size: 0.8rem;
      font-weight: 500;
    }

    .role-admin {
      background: #fed7d7;
      color: #c53030;
    }

    .role-user {
      background: #bee3f8;
      color: #2b6cb0;
    }

    /* Activity Styles */
    .activity-list {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .activity-item {
      display: flex;
      align-items: center;
      gap: 1rem;
      padding: 1rem;
      background: #f7fafc;
      border-radius: 8px;
      border-left: 4px solid #667eea;
    }

    .activity-icon {
      font-size: 1.5rem;
    }

    .activity-details {
      flex: 1;
    }

    .activity-details strong {
      color: #2d3748;
    }

    .activity-details p {
      color: #4a5568;
      margin: 0.25rem 0;
    }

    .activity-details small {
      color: #718096;
    }

    /* Additional Styles */
    .seat-info, .price-info {
      display: flex;
      flex-direction: column;
      gap: 0.25rem;
    }

    .seat-class, .price {
      font-size: 0.8rem;
      padding: 0.25rem 0;
    }

    .flight-details {
      line-height: 1.4;
    }

    .flight-details strong {
      color: #2d3748;
    }

    .flight-details p {
      color: #4a5568;
      margin: 0.25rem 0;
    }

    .flight-details small {
      color: #718096;
    }

    .form-container {
      background: #f7fafc;
      padding: 1.5rem;
      border-radius: 8px;
      margin-bottom: 2rem;
    }

    .form-container h3 {
      margin-bottom: 1rem;
      color: #2d3748;
    }

    .filters {
      display: flex;
      gap: 1rem;
      align-items: center;
